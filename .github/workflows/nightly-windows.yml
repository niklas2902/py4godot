name: nightly windowsðŸŒƒ
on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *' # run at 2 AM UTC

jobs:
  check_date:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: master
      - name: print latest_commit
        run: echo ${{ github.sha }}
      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours"  ${{ github.sha }}) && echo "should_run=false" >> $GITHUB_OUTPUT

  windows-build:
    needs: check_date
    if: ${{ needs.check_date.outputs.should_run != 'false' }}
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - PLATFORM: 'windows-64'
            PYTHON_ARCH: 'x64'
            VS_ARCH: 'amd64'
    steps:
      - uses: actions/checkout@v3
        with:
          ref: master
          submodules: 'recursive'

      - name: Set up Python 3.11.3
        uses: actions/setup-python@v2
        with:
          python-version: "3.11.3"

      - name: Download latest Godot and add to PATH
        shell: powershell
        run: |
          # Create directory for Godot
          New-Item -Path "C:\Godot" -ItemType Directory -Force
      
          # Download latest Godot stable
          Invoke-WebRequest -Uri "https://github.com/godotengine/godot/releases/download/4.4-stable/Godot_v4.4-stable_win64.exe.zip" -OutFile "C:\Godot\godot.zip"
      
          # Extract Godot
          Expand-Archive -Path "C:\Godot\godot.zip" -DestinationPath "C:\Godot" -Force
      
          # Rename the executable to "godot"
          Rename-Item -Path "C:\Godot\Godot_v4.4-stable_win64.exe" -NewName "godot.exe" -Force
      
          # Add to PATH environment variable (system-wide)
          echo "C:\Godot" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Add to system path for child processes
          [Environment]::SetEnvironmentVariable("PATH", "$env:PATH;C:\Godot", [EnvironmentVariableTarget]::Machine)
          
          # Verify Godot is in PATH
          try {
              godot --version
          } catch {
              Write-Host "Failed to run Godot from PATH"
          }

      - name: Cache py4godot/classes directory
        id: cache-py4godot-classes
        uses: actions/cache@v3
        with:
          path: py4godot/classes
          key: ${{ runner.os }}-py4godot-classes-${{ hashFiles('**/generate_classes.py', '**/generate_pxd_bridge.py', '**/extension_api.json') }}
          restore-keys: |
            ${{ runner.os }}-py4godot-classes-
      - name: Run Python script and check result
        shell: bash
        run: |
          set +e
          python meson_scripts/does_cache_exist.py
          exit_code=$?
          if [ $exit_code -eq 0 ]; then
            echo "Cache exists"
            # Add any actions you want to take on success
          else
            echo "Cache does not exist"
            exit 0
          fi
          set -e
      - name: Print variables
        run: |
          python meson_scripts/variables.py

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install -r requirements.txt
          python -m pip install flake8

      - name: Print structure
        run: python meson_scripts/print_tools.py

      - name: Install Mesa
        shell: cmd
        run: |
          mkdir godot
          curl.exe -L --output godot/mesa.7z --url https://github.com/pal1000/mesa-dist-win/releases/download/20.3.2/mesa3d-20.3.2-release-msvc.7z
          "C:\Program Files\7-Zip\7z.exe" x godot/mesa.7z -ogodot
          cd godot
          mklink opengl32.dll "x64\opengl32.dll"
          mklink libglapi.dll "x64\libglapi.dll"

      - name: Generate files
        run: python generate.py -dev_build=True

      - name: Conditional cythonize
        shell: bash
        run: |
          set +e
          python meson_scripts/does_cache_exist.py
          exit_code=$?
          set -e
          if [ $exit_code -eq 0 ]; then
            echo "Cache hit for py4godot/classes directory"
            python cythonize_files.py -mode="cache"
          else
            echo "Cache miss for py4godot/classes directory"
            python cythonize_files.py -mode="dev"
          fi

      - name: Test Godot in PATH
        shell: powershell
        run: |
          # Refresh environment variables
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path", "User")
          # Check if godot is in PATH
          $godotPath = Get-Command godot -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source
          if ($godotPath) {
            Write-Host "Godot found at: $godotPath"
          } else {
            Write-Host "Godot not found in PATH"
            Write-Host "Current PATH: $env:Path"
          }
          
          # Test with Python's shutil.which
          $pythonTest = python -c "import shutil; print('Godot path:', shutil.which('godot'))"
          Write-Host $pythonTest

      - name: Build
        shell: cmd
        run: python build.py --target_platform=windows64 --compiler=gcc -create_plugin=False -buildtype=release -run_tests=True

      - name: Echo testlog.txt
        if: always() # Ensures it runs even if the previous step fails
        run: cat build/windows64/meson-logs/testlog.txt

      - name: Create cache
        run: python meson_scripts/create_cache.py

      - name: Print structure
        run: python meson_scripts/print_tools.py